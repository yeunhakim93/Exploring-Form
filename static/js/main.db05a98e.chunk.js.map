{"version":3,"sources":["redux/slices/formBuilder/formBuilder.slice.ts","redux/slices/formBuilder/useFormBuilder.ts","redux/store.ts","views/forms/state/ViewState.tsx","views/forms/elements/FormElements/FormCheckboxElement.tsx","views/forms/elements/FormElements/FormContainerElement.tsx","views/forms/elements/FormElements/FormShortAnswerElement.tsx","views/forms/elements/FormElements/FormElement.tsx","views/forms/elements/ItemTypes/ItemTypes.ts","views/forms/elements/Components/DropArea.tsx","views/forms/elements/FormElementsList.tsx","views/forms/elements/FormIcons/FormIcon.tsx","views/forms/builder/FormBuilderCanvas/FormBuilderCanvas.tsx","views/forms/builder/FormBuilderSidebar/FormBuilderSidebar.tsx","views/forms/builder/FormBuilderPage/FormBuilderPage.tsx","index.js"],"names":["initialState","brandId","kind","data","inputDataFromDb","returnObject","children","map","item","id","iterate","parentId","idx","type","body","columns","finalChildren","i","length","nestedColumn","push","nestedItem","parent","undefined","index","adjacencify","require","formBuilderSlice","createSlice","name","reducers","addOrUpdateElement","state","action","payload","element","currentElement","partiallyDeconstructed","theTargetedParentArray","filter","newTopLevelChildren","addElement","updateElement","removeFormElement","handleDelete","clearForm","submitForm","selectFormData","formBuilder","actions","prevId","currentList","currentIndex","indexOf","splice","unshift","newChildMatrix","Array","fill","oldList","elementToAdd","child","updatedArray","elementId","list","useFormBuilder","formData","useAppSelector","dispatch","useAppDispatch","dispatchUpdateOrAddElement","formElement","dispatchRemoveFormElement","formElementId","dispatchClearForm","dispatchSubmitForm","useMemo","store","configureStore","reducer","useDispatch","useSelector","ViewState","useState","isAdjacencyList","setIsAdjacencyList","style","position","width","height","left","top","background","color","overflow","zIndex","onClick","e","prev","margin","JSON","stringify","parse","currArray","childId","currNode","flat","FormCheckboxElement","listId","handleRemoveElement","onMoveElement","useDrag","collect","monitor","isDragging","drag","opacity","ref","backgroundColor","border","padding","display","alignItems","gap","borderRadius","boxShadow","transform","right","dangerouslySetInnerHTML","__html","FormContainerElement","propColumns","justifyContent","columnElement","rows","containerIndex","FormShortAnswerElement","flexDirection","FormElement","elementData","DroppableItemTypesArr","DropArea","handleAddElement","handleMoveElement","useDrop","accept","canDrop","drop","newElement","Date","now","toString","Math","floor","random","isOver","isActive","FormElementsList","elementList","setElementList","prevElementList","prevElementIndex","findIndex","slice","elementIdToRemove","elementIdToMove","from","to","textAlign","FormIcon","FormBuilderCanvas","formElements","elementArr","elementColor","checkbox","shortAnswer","container","FormBuilderSidebar","isDesktop","minWidth","FormBuilderPage","React","isViewingState","setIsViewingState","window","matchMedia","matches","setIsDesktop","useEffect","addEventListener","float","fontSize","preventDefault","ReactDOM","render","DndProvider","backend","TouchBackend","HTML5Backend","document","getElementById"],"mappings":"06BAKMA,EAAe,CACnBC,QAAS,WACTC,KAAM,gBACNC,KAuCF,SACEC,GAEA,IAAMC,EAAuC,CAAC,EAC9CA,EAAaC,SAAWF,EAAgBG,KAAI,SAACC,GAAI,OAAKA,EAAKC,EAAE,IA0E7D,OAxEgB,SAAVC,EAAO,GAQN,IASkB,EAhBvBP,EAAI,EAAJA,KACAQ,EAAQ,EAARA,SACAC,EAAG,EAAHA,IAMA,cAQmBT,GAAI,IAAvB,2BAAyB,CAAC,IAAfK,EAAI,QAGb,GAFAH,EAAaG,EAAKC,IAAM,CAAEI,KAAML,EAAKK,KAAMC,KAAMN,EAAKM,MAElDN,EAAKO,QAAS,CAQhB,IAPA,IAAIC,EAAgB,GAOXC,EAAI,EAAGA,EAAIT,EAAKO,QAAQG,OAAQD,IAAK,CAC5C,IAAIE,EAAeX,EAAKO,QAAQE,GAQhCD,EAAcI,KACZD,EAAaZ,KAAI,SAACc,GAA0B,OAAKA,EAAWZ,EAAE,KAUhEC,EAAQ,CAAEP,KAAMgB,EAAcR,SAAUH,EAAKC,GAAIG,IAAKK,GACxD,CAEAZ,EAAaG,EAAKC,IAAIH,SAAWU,CACnC,CAUIL,IACFN,EAAaG,EAAKC,IAAIa,OAAS,CAC7Bb,GAAIE,QAEMY,IAARX,IAAmBP,EAAaG,EAAKC,IAAIa,OAAOE,MAAQZ,GAEhE,CAAC,+BACH,CAEAF,CAAQ,CAAEP,KAAMC,IACTC,CACT,CAtHQoB,CALgBC,EAAQ,MAQnBC,EAAmBC,YAAY,CAC1CC,KAAM,cACN7B,eACA8B,SAAU,CACRC,mBAAkB,SAChBC,EACAC,GAOID,EAAM7B,KAAK8B,EAAOC,QAAQC,QAAQ1B,IAsQ5C,SACEuB,EACAC,GAOA,IAAMG,EAAiBJ,EAAM7B,KAAK8B,EAAOC,QAAQC,QAAQ1B,IACrD4B,EAAsB,eACrBL,EAAM7B,KAAK8B,EAAOC,QAAQC,QAAQ1B,KAEnC4B,EAAuBf,SACzBe,EAAuBf,OAAM,eAAQe,EAAuBf,SAS9D,GAAIc,EAAed,OAAQ,CAMzB,IAAMgB,EACJN,EAAM7B,KAAK6B,EAAM7B,KAAK8B,EAAOC,QAAQC,QAAQ1B,IAAIa,OAAOb,IAAIH,SAC1D8B,EAAed,OAAOE,OAS1BQ,EAAM7B,KAAK6B,EAAM7B,KAAK8B,EAAOC,QAAQC,QAAQ1B,IAAIa,OAAOb,IAAIH,SAC1D8B,EAAed,OAAOE,OACpBc,EAAuBC,QACzB,SAAC9B,GAAU,OAAcA,IAAOwB,EAAOC,QAAQC,QAAQ1B,EAAE,GAE7D,KAAO,CACL,IACM+B,EADuB,YAAOR,EAAM7B,KAAKG,UACKiC,QAClD,SAAC9B,GAAU,OAAcA,IAAOwB,EAAOC,QAAQC,QAAQ1B,EAAE,IAE3DuB,EAAM7B,KAAKG,SAAWkC,CACxB,CAOAC,EAAWT,EAAOC,EACpB,CAhUQS,CAAcV,EAAOC,GAErBQ,EAAWT,EAAOC,EAEtB,EACAU,kBAAiB,SAACX,EAAOC,GACvBW,EAAaZ,EAAOC,EACtB,EACAY,UAAS,SAACb,GACR,OAAOhC,CACT,EACA8C,WAAU,SAACd,GACT,OAAOhC,CACT,KAIS+C,EAAiB,SAACf,GAAgB,OAAKA,EAAMgB,YAAY7C,IAAK,EAEpE,EACLwB,EAAiBsB,QADJN,EAAiB,EAAjBA,kBAAmBE,EAAS,EAATA,UAAWC,EAAU,EAAVA,WAAYf,EAAkB,EAAlBA,mBAyGzD,SAASU,EACPT,EACAC,GAeA,MAA6CA,EAAOC,QAA5CC,EAAO,EAAPA,QAASxB,EAAQ,EAARA,SAAUa,EAAK,EAALA,MAAO0B,EAAM,EAANA,OAOlC,GAAIvC,EAAU,CACZ,IAAIwC,EAA6B,GAQjC,GAPInB,EAAM7B,KAAKQ,GAAUL,eACTiB,IAAVC,IACF2B,EAAW,YACLnB,EAAM7B,KAAKQ,GAAUL,SAAkCkB,UAInDD,IAAVC,EAAqB,CACvB,GAAI0B,EAAQ,CACV,IAAME,EAAeD,EAAYE,QAAQH,GAQrCE,IAAiBD,EAAYjC,OAC9Bc,EAAM7B,KAAKQ,GAAUL,SAAkCkB,GAAOJ,KAC7De,EAAQ1B,IAWV0C,EAAYG,OAAOF,EAAe,EAAG,EAAGjB,EAAQ1B,GAEpD,MAOE0C,EAAYI,QAAQpB,EAAQ1B,IAS9B,GAAIuB,EAAM7B,KAAKQ,GAAUL,SACtB0B,EAAM7B,KAAKQ,GAAUL,SAAkCkB,GACtD2B,MACG,CACL,IAAIK,EAAiB,IAAIC,MAAM,GAAGC,KAAK,IAEvCF,EAAehC,GAAS,CAACW,EAAQ1B,IAChCuB,EAAM7B,KAAKQ,GAAUL,SACpBkD,CACJ,CACF,CACF,MASE,GAAIxB,EAAM7B,KAAKG,SACb,GAAI4C,EAAQ,CACV,IAAIS,EAAO,YAAQ3B,EAAM7B,KAAKG,UAC9BqD,EAAQL,OAAOK,EAAQN,QAAQH,GAAU,EAAG,EAAGf,EAAQ1B,IACtDuB,EAAM7B,KAAKG,SAAmBqD,CACjC,MAQG3B,EAAM7B,KAAaG,SAAQ,CAC1B6B,EAAQ1B,IAAE,mBACNuB,EAAM7B,KAAaG,gBAI1B0B,EAAM7B,KAAaG,SAAW,CAAC6B,EAAQ1B,IAI5C,IAAImD,EAAoB,CAAE/C,KAAMsB,EAAQtB,KAAMC,KAAMqB,EAAQrB,MAQxDH,IACFiD,EAAatC,OAAS,CACpBb,GAAIE,SAIMY,IAAVC,IACFoC,EAAatC,OAAOE,MAAQA,GAE9BQ,EAAM7B,KAAKgC,EAAQ1B,IAAMmD,CAC3B,CA+DA,SAAShB,EAAaZ,EAAYC,GAChC,GAAID,EAAM7B,KAAK8B,EAAOC,QAAQzB,IAAK,CACjC,IAAIoD,EAAK,eACJ7B,EAAM7B,KAAK8B,EAAOC,QAAQzB,KAS/B,GANKoD,EAAcvC,SAChBuC,EAAcvC,OAAM,eACfU,EAAM7B,KAAK8B,EAAOC,QAAQzB,IAAYa,SAIzCU,EAAM7B,KAAK8B,EAAOC,QAAQzB,IAAYa,OAAQ,CACjD,MAA+BU,EAAM7B,KAAK8B,EAAOC,QAAQzB,IACtDa,OADSA,EAAM,EAAVb,GAAYe,EAAK,EAALA,MAOdsC,EAJiB,YACjB9B,EAAM7B,KAAKmB,GAAQhB,SAAiBkB,IAGHe,QACrC,SAACwB,GAAS,OAAKA,IAAc9B,EAAOC,QAAQzB,EAAE,IAE/CuB,EAAM7B,KAAKmB,GAAQhB,SAAiBkB,GAASsC,CAChD,KAAO,CAEL,IACMA,EADe,YAAQ9B,EAAM7B,KAAKG,UACHiC,QACnC,SAACwB,GAAS,OAAKA,IAAc9B,EAAOC,QAAQzB,EAAE,IAE/CuB,EAAM7B,KAAKG,SAAmBwD,CACjC,CASA,GAAI9B,EAAM7B,KAAK8B,EAAOC,QAAQzB,IAAIH,SAAU,CAAC,IACc,EADf,cACvB0B,EAAM7B,KAAK8B,EAAOC,QAAQzB,IAAIH,UAAQ,IAAzD,2BAA2D,CAAC,IAChC,EADjB0D,EAAI,sBACSA,GAAI,IAA1B,2BAA4B,CAC1BpB,EAAaZ,EAAO,CAAEE,QAAS,CAAEzB,GADjB,UAElB,CAAC,+BACH,CAAC,+BACH,QAEOuB,EAAM7B,KAAK8B,EAAOC,QAAQzB,GACnC,CACF,CClYO,IAAMwD,EAAiB,WAC5B,IAAMC,EAAWC,EAAepB,GAE1BqB,EAAWC,IAkBXC,EAA6B,SAAH,GAUzB,IATLC,EAAW,EAAXA,YACA5D,EAAQ,EAARA,SACAa,EAAK,EAALA,MACA0B,EAAM,EAANA,OAOAkB,EACErC,EAAmB,CAAEI,QAASoC,EAAa5D,WAAUa,QAAO0B,WAEhE,EAQMsB,EAA4B,SAAH,OAC7BC,EAAa,EAAbA,cAAa,OAGTL,EAASzB,EAAkB,CAAElC,GAAIgE,IAAkB,EAEnDC,EAAoB,WAAH,OAASN,EAASvB,IAAa,EAChD8B,EAAqB,WAAH,OAASP,EAAStB,IAAc,EAExD,OAAO8B,mBACL,iBAAO,CACLV,WACAI,6BACAE,4BACAE,oBACAC,qBACD,GACD,CAACT,GAEL,ECrEaW,EAAQC,YAAe,CAClCC,QAAS,CACP/B,YAAarB,EAAiBoD,WAOrBV,EAAiB,WAAH,OAASW,aAA2B,EAClDb,EAAkDc,I,8CC0ChDC,EApDa,WAC1B,IH2H4B/E,EG3HpB+D,EAAaD,IAAbC,SACR,EAA8CiB,oBAAS,GAAK,mBAArDC,EAAe,KAAEC,EAAkB,KAC1C,OACE,sBACEC,MAAO,CACLC,SAAU,WACVC,MAAO,QACPC,OAAQ,OACRC,KAAM,MACNC,IAAK,MACLC,WAAY,QACZC,MAAO,QACPC,SAAU,SACVC,OAAQ,OACR,UAEF,wBACEC,QAAS,SAACC,GACRZ,GAAmB,SAACa,GAAI,OAAMA,CAAI,GACpC,EAAE,SACH,qBAGAd,GACC,qBACEE,MAAO,CACLQ,SAAU,SACVL,OAAQ,MACRD,MAAO,OACPW,OAAQ,QACR,SAEDC,KAAKC,UAAUnC,EAAU,KAAM,MAGlCkB,GACA,qBACEE,MAAO,CACLQ,SAAU,SACVL,OAAQ,MACRD,MAAO,OACPW,OAAQ,QACR,SAEDC,KAAKC,WH+EclG,EG/EU+D,EHgFxB,SAARoC,EAAShG,GACb,IAE8B,EAFxBiG,EAAY,GAAG,cAECjG,GAAQ,IAA9B,2BAAgC,CAAC,IAAD,EAArBkG,EAAO,QACVC,EAAW,CAAE5F,KAAMV,EAAKqG,GAAS3F,KAAMJ,GAAI+F,GAC7CrG,EAAKqG,GAAS1F,OAAO2F,EAAiB3F,KAAOX,EAAKqG,GAAS1F,MAC3DX,EAAKqG,GAASX,QAAQY,EAAiBZ,MAAQ1F,EAAKqG,GAASX,OAChD,QAAjB,EAAI1F,EAAKqG,UAAQ,OAAb,EAAelG,WAChBmG,EAAiB1F,QAAWZ,EAAKqG,GAAiBlG,SAASC,KAC1D,SAACC,GAAS,OAAK8F,EAAM9F,EAAK,KAG9B+F,EAAUnF,KAAKqF,EACjB,CAAC,+BACD,OAAOF,CACT,CAEOD,CAAMnG,EAAKG,UAAUoG,QGjGqB,KAAM,OAKzD,E,QC5CaC,EAAuC,SAAH,GAK1C,IAJLlG,EAAE,EAAFA,GACAK,EAAI,EAAJA,KACA8F,EAAM,EAANA,OACAC,EAAmB,EAAnBA,oBAEMC,EAAgB,WACpBD,EAAoBpG,EACtB,EACA,EAA+BsG,aAAQ,iBAAO,CAC5ClG,KAAM,kBACNL,KAAM,CAAEK,KAAM,WAAYJ,KAAIK,OAAM8F,SAAQE,iBAC5CE,QAAS,SAACC,GAAO,MAAM,CACrBC,WAAYD,EAAQC,aACrB,EACF,IAAE,mBANMA,EAAU,KAAVA,WAAcC,EAAI,KAOrBC,EAAUF,EAAa,GAAM,EACnC,OACE,sBACEG,IAAKF,EACL7B,MAAO,CACLa,OAAQ,OACRmB,gBAAiB,UACjBC,OAAQ,iBACRC,QAAS,OACTC,QAAS,OACTC,WAAY,WACZC,IAAK,OACLC,aAAc,MACdC,UAAW,kCACXtC,SAAU,WACVuC,UAAW,kBACXV,WACA,UAEF,wBACE9B,MAAO,CACLC,SAAU,WACVwC,MAAO,OACPpC,IAAK,OACL4B,OAAQ,iBACRK,aAAc,OAEhB5B,QAASc,EAAc,SACxB,MAGD,qBACEkB,wBAAyB,CACvBC,OAAQnH,EAAO,cAAgBL,EAAK,cAGxC,uBAAOI,KAAK,eAGlB,ECpDaqH,EAA4D,SAAH,GAM/D,IALLzH,EAAE,EAAFA,GACAK,EAAI,EAAJA,KACSqH,EAAW,EAApBpH,QACA6F,EAAM,EAANA,OACAC,EAAmB,EAAnBA,oBAGA,EAA0C1B,mBAAS,GAAE,mBACrD,GADoB,KAAkB,KAEpCA,mBAA2DgD,IAAY,mBADlEpH,EAAO,KAGR+F,GAHoB,KAGJ,WACpBD,EAAoBpG,EACtB,GAEA,EAA+BsG,aAAQ,WACrC,MAAO,CACLlG,KAAM,mBACNL,KAAM,CAAEK,KAAM,YAAaJ,KAAIK,OAAM8F,SAAQ7F,UAAS+F,iBACtDE,QAAS,SAACC,GAAO,MAAM,CACrBC,WAAYD,EAAQC,aACrB,EAEL,IAAE,mBAROA,EAAU,KAAVA,WAAcC,EAAI,KASrBC,EAAUF,EAAa,GAAM,EAEnC,OACE,sBACEG,IAAKF,EACL7B,MAAO,CACLgC,gBAAiB,UACjBC,OAAQ,iBACRpB,OAAQ,OACRqB,QAAS,OACTE,WAAY,SACZU,eAAgB,gBAChBR,aAAc,MACdC,UAAW,kCACXtC,SAAU,WACVkC,QAAS,cACTK,UAAW,kBACXV,WACA,UAEF,wBACE9B,MAAO,CACLC,SAAU,WACVwC,MAAO,OACPpC,IAAK,OACL4B,OAAQ,iBACRK,aAAc,OAEhB5B,QAASc,EAAc,SACxB,MAGD,qBACEkB,wBAAyB,CACvBC,OAAQnH,EAAO,cAAgBL,EAAK,cAGxC,qBACE6E,MAAO,CACLmC,QAAS,OACTC,WAAY,SACZU,eAAgB,iBAChB,SAEDrH,EAAQR,KAAI,SAAC8H,EAAepH,GAC3B,OACE,cAAC,EAAgB,CAEfR,GAAIA,EAAKQ,EACTqH,KAAMD,EACN1H,SAAUF,EACV8H,eAAgBtH,GAJXA,EAOX,QAIR,ECtFauH,EAA0C,SAAH,GAK7C,IAJL/H,EAAE,EAAFA,GACAK,EAAI,EAAJA,KACA8F,EAAM,EAANA,OACAC,EAAmB,EAAnBA,oBAEMC,EAAgB,WACpBD,EAAoBpG,EACtB,EACA,EAA+BsG,aAAQ,iBAAO,CAC5ClG,KAAM,qBACNL,KAAM,CAAEK,KAAM,cAAeJ,KAAIK,OAAM8F,SAAQE,iBAC/CE,QAAS,SAACC,GAAO,MAAM,CACrBC,WAAYD,EAAQC,aACrB,EACF,IAAE,mBANMA,EAAU,KAAVA,WAAcC,EAAI,KAOrBC,EAAUF,EAAa,GAAM,EACnC,OACE,sBACEG,IAAKF,EACL7B,MAAO,CACLgC,gBAAiB,UACjBC,OAAQ,iBACRpB,OAAQ,OACRqB,QAAS,OACTC,QAAS,OACTgB,cAAe,SACfd,IAAK,OACLC,aAAc,MACdC,UAAW,kCACXtC,SAAU,WACVuC,UAAW,kBACXV,WACA,UAEF,wBACE9B,MAAO,CACLC,SAAU,WACVwC,MAAO,OACPpC,IAAK,OACL4B,OAAQ,iBACRK,aAAc,OAEhB5B,QAASc,EAAc,SACxB,MAGD,qBACEkB,wBAAyB,CACvBC,OAAQnH,EAAO,cAAgBL,EAAK,cAGxC,uBAAOoB,KAAMpB,EAAIA,GAAIA,MAG3B,EC9CaiI,EAA+B,SAAH,GAIlC,IAHLC,EAAW,EAAXA,YACA/B,EAAM,EAANA,OACAC,EAAmB,EAAnBA,oBAEQhG,EAA4B8H,EAA5B9H,KAAMJ,EAAsBkI,EAAtBlI,GAAIK,EAAkB6H,EAAlB7H,KAAMC,EAAY4H,EAAZ5H,QACxB,MAAa,aAATF,EAEA,cAAC,EAAmB,CAClBJ,GAAIA,EACJK,KAAMA,EACN8F,OAAQA,EACRC,oBAAqBA,IAGP,gBAAThG,EAEP,cAAC,EAAsB,CACrBJ,GAAIA,EACJK,KAAMA,EACN8F,OAAQA,EACRC,oBAAqBA,IAGP,cAAThG,EAEP,cAAC,EAAoB,CACnBJ,GAAIA,EACJK,KAAMA,EACNC,QAASA,EACT6F,OAAQA,EACRC,oBAAqBA,IAIpB,4BACT,E,QC9Ca+B,EAAwB,CACnC,gBACA,eACA,kBACA,mBACA,kBACA,sBCsBWC,EAAoC,SAAH,GAOvC,IANL3F,EAAM,EAANA,OACA1B,EAAK,EAALA,MACAF,EAAM,EAANA,OACAsF,EAAM,EAANA,OACAkC,EAAgB,EAAhBA,iBACAC,EAAiB,EAAjBA,kBAEQzE,EAA+BL,IAA/BK,2BAER,EAAoC0E,aAClC,iBAAO,CACLC,OAAQL,EACRM,QAAS,WACP,OAAO,CACT,EACAC,KAAM,SAAC3I,EAAgByG,GACrB,IAAMmC,EAAU,aACd3I,GAAID,EAAKC,GACLD,EAAKC,GACL4I,KAAKC,MAAMC,WACXC,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,IAAIH,SAAS,IACjD1I,KAAML,EAAKK,KACXC,KAAMN,EAAKM,KAAON,EAAKM,KAAO,2BACZ,cAAdN,EAAKK,MAAwB,CAC/BE,QAASP,EAAKO,QAAUP,EAAKO,QAAU,CAAC,GAAI,GAAI,MAGhD6F,IAAWpG,EAAKoG,OAClBmC,EAAkBvI,EAAKC,GAAIyC,IAE3B1C,EAAKsG,eAAiBtG,EAAKsG,gBAC3BgC,GACEA,EAAiB,CAAEM,aAAYlG,SAAQ1B,QAAOF,YAWlDgD,EAA2B,CACzBC,YAAa6E,EACbzI,SAAUW,EACVE,QACA0B,UAEJ,EACA8D,QAAS,SAACC,GAAO,MAAM,CACrB0C,OAAQ1C,EAAQ0C,SAChBT,QAASjC,EAAQiC,UAClB,EACF,GACD,IACD,0BA/CQA,EAAO,EAAPA,QAASS,EAAM,EAANA,OAAUR,EAAI,KAiD1BS,EAAWV,GAAWS,EAE5B,OACE,qBACEtC,IAAK8B,EACL7D,MAAO,CACLgC,gBAAiBsC,EAAW,UAAY,GACxCpE,MAAO,OACPC,OAAQmE,EAAW,OAAS,QAIpC,EChGaC,EAAoC,SAAH,GAKvC,IAJLpJ,EAAE,EAAFA,GACA8H,EAAc,EAAdA,eACAD,EAAI,EAAJA,KACA3H,EAAQ,EAARA,SAEQ6D,EAA8BP,IAA9BO,0BACR,EACEW,mBAAyDmD,GAAK,mBADzDwB,EAAW,KAAEC,EAAc,KAG5BjB,EAAmB,SAAH,GAQf,IAPLM,EAAU,EAAVA,WACAlG,EAAM,EAANA,OACM,EAAN5B,OAUEyI,EAJG7G,EAIY,SAAC8G,GACd,IAAIC,EAAmBD,EAAgBE,WACrC,SAAC/H,GAAO,OAAKA,EAAQ1B,KAAOyC,CAAM,IAEpC,MAAM,GAAN,mBACK8G,EAAgBG,MAAM,EAAGF,EAAmB,IAAE,CACjDb,GAAU,YACPY,EAAgBG,MAAMF,EAAmB,IAEhD,EAXe,SAACD,GAAe,OAAMZ,GAAU,mBAAKY,GAAe,EAavE,EAGMnD,EAAsB,SAACuD,GAM3B5F,EAA0B,CAAEC,cAAe2F,IAC3CL,GAAe,SAACC,GAAe,OAC7BA,EAAgBzH,QAAO,SAACJ,GAAO,OAAKA,EAAQ1B,KAAO2J,CAAiB,GAAC,GAEzE,EAEMrB,EAAoB,SACxBsB,EACAnH,GAEImH,IAAoBnH,GAExB6G,GAAe,SAACC,GACd,IAAMM,EAAON,EAAgBE,WAC3B,SAAC/H,GAAO,OAAKA,EAAQ1B,KAAO4J,CAAe,IAEvCE,OACOhJ,IAAX2B,EACI,EACA8G,EAAgBE,WAAU,SAAC/H,GAAO,OAAKA,EAAQ1B,KAAOyC,CAAM,IAAI,EACtE,OAAIoH,IAASC,EAAWP,EACnB9G,EAMMqH,EAAKD,EAER,GAAN,mBACKN,EAAgBG,MAAM,EAAGI,IAAG,CAC/BP,EAAgBM,IAAK,YAClBN,EAAgBG,MAAMI,EAAID,IAAK,YAC/BN,EAAgBG,MAAMG,EAAO,KAI5B,GAAN,mBACKN,EAAgBG,MAAM,EAAGG,IAAK,YAC9BN,EAAgBG,MAAMG,EAAO,EAAGC,IAAG,CACtCP,EAAgBM,IAAK,YAClBN,EAAgBG,MAAMI,KAnBrB,CACJP,EAAgBM,IAAK,mBAClBN,EAAgBG,MAAM,EAAGG,IAAK,YAC9BN,EAAgBG,MAAMG,EAAO,IAmBtC,GACF,EAEA,OACE,sBAAKhF,MAAO,CAAEmC,QAAS,OAAQgB,cAAe,UAAW,UACvD,cAAC,EAAQ,CACPjH,MAAO+G,EACPjH,OAAQX,EACRiG,OAAQnG,EACRqI,iBAAkBA,EAClBC,kBAAmBA,IAEpBe,EAAY5I,OACX4I,EAAYvJ,KAAI,SAACoI,EAAa1H,GAC5B,IAAI8C,EACF4E,EAAYlI,IACZ4I,KAAKC,MAAMC,WACTC,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,IAAIH,SAAS,IACjD,OACE,gCACE,cAAC,EAAW,CACVZ,YAAW,2BAAOA,GAAW,IAAElI,GAAIsD,IACnC6C,OAAQnG,EACRoG,oBAAqBA,IAEvB,cAAC,EAAQ,CACP3D,OAAQa,EACRvC,MAAO+G,EACPjH,OAAQX,EACRiG,OAAQnG,EACRqI,iBAAkBA,EAClBC,kBAAmBA,MAZbhF,EAgBd,IAEA,sBACEuB,MAAO,CACLgC,gBAAiB,UACjBC,OAAQ,kBACRpB,OAAQ,OACRqB,QAAS,OACTE,WAAY,SACZU,eAAgB,gBAChBR,aAAc,MACd4C,UAAW,UACX,UACH,wBAEC,cAAC,EAAQ,CACP1B,iBAAkBA,EAClBC,kBAAmBA,EACnBvH,MAAO+G,EACPjH,OAAQX,EACRiG,OAAQnG,SAMpB,ECzJagK,EAA4B,SAAH,GAAyB,IAAnB5J,EAAI,EAAJA,KAAMgF,EAAK,EAALA,MAChD,EAAiBkB,aAAQ,iBAAO,CAC9BlG,KAAMA,EAAO,OACbL,KAAM,CAAEK,QACT,IAHQsG,EAGN,iBAHU,GAIb,OACE,qBACEE,IAAKF,EACL7B,MAAO,CACLa,OAAQ,OACRoB,OAAQ,iBACRK,aAAc,MACdC,UAAW,kCACXL,QAAS,OACTgD,UAAW,SACXpC,eAAgB,gBAChBd,gBAAiBzB,EACjBiC,UAAW,mBACX,SAEDjH,GAIP,EC3BMV,EAAOuB,EAAQ,IAMRgJ,EAAqC,SAAH,GAAgB,IAAVjK,EAAE,EAAFA,GACnD,EACE0E,mBAAyDhF,GAAK,mBADzDwK,EAAY,KAAiB,KAGpC,OACE,sBACErF,MAAO,CACLmC,QAAS,OACTgB,cAAe,SACfjD,MAAO,MACPM,SAAU,OACVwB,gBAAiB,UACjBE,QAAS,OACTrB,OAAQ,QACR,UACH,oBAEC,cAAC,EAAgB,CACf1F,GACE4I,KAAKC,MAAMC,WACXC,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,IAAIH,SAAS,IAE/CjB,KAAMqC,EACNhK,SAAUF,MAIlB,EClCMmK,EAAa,CAAC,WAAY,cAAe,aACzCC,EAAe,CACnBC,SAAU,UACVC,YAAa,UACbC,UAAW,WAMAC,EAAsC,SAAH,GAAuB,IAAjBC,EAAS,EAATA,UACpD,OACE,sBACE5F,MAAO,CACLmC,QAAS,OACTgB,cAAe,SACfjD,MAAO0F,EAAY,MAAQ,MAC3BC,SAAU,QACV7D,gBAAiB,UACjBE,QAAS,OACTrB,OAAQ,QACR,UAEF,8BAAK,uBACJyE,EAAWrK,KAAI,SAACM,GAAI,OACnB,cAAC,EAAQ,CAAYA,KAAMA,EAAMgF,MAAOgF,EAAahK,IAAtCA,EAA+C,MAItE,EC1BauK,EAAkB,WAC7B,MAA4CC,IAAMlG,UAAS,GAAM,mBAA1DmG,EAAc,KAAEC,EAAiB,KACxC,EAAkCpG,mBAChCqG,OAAOC,WAAW,sBAAsBC,SACzC,mBAFMR,EAAS,KAAES,EAAY,KAe9B,OAXAC,qBAAU,WACRJ,OACGC,WAAW,sBACXI,iBAAiB,UAAU,SAAC5F,GAAC,OAAK0F,EAAa1F,EAAEyF,QAAQ,GAC9D,GAAG,IAQD,qCACGJ,GAAkB,cAAC,EAAS,IAC7B,sBACEhG,MAAO,CACLmC,QAASyD,EAAY,OAAS,SAC9BzF,OAAQ,sBACR,UAEF,cAAC,EAAkB,CAACyF,UAAWA,IAC/B,cAAC,EAAiB,OAGpB,wBACE5F,MAAO,CACLa,OAAQ,OACRoB,OAAQ,OACRC,QAAS,OACTsE,MAAO,QACPlE,aAAc,OACdmE,SAAUb,EAAY,OAAS,OAC/BnF,OAAQ,QAEVC,QA5BN,SAA+BC,GAC7BA,EAAE+F,iBACFT,GAAkB,SAACrF,GAAI,OAAMA,CAAI,GACnC,EAyBqC,SAChC,iBAKP,ECzCA+F,IAASC,OACP,cAAC,aAAgB,UACf,cAAC,IAAQ,CAACrH,MAAOA,EAAM,SACrB,cAACsH,EAAA,EAAW,CACVC,QACEZ,OAAOC,WAAW,qBAAqBC,QACnCW,IACAC,IACL,SAED,cAAC,EAAe,UAItBC,SAASC,eAAe,Q","file":"static/js/main.db05a98e.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { FormElementType, FormAdjacencifiedData } from \"../../../types\";\nimport type { RootState } from \"../../store\";\nconst initialFormData = require(\"../../../InitialData.json\");\n\nconst initialState = {\n  brandId: \"formteam\",\n  kind: \"questionnaire\",\n  data: adjacencify(initialFormData),\n};\n\nexport const formBuilderSlice = createSlice({\n  name: \"formBuilder\",\n  initialState,\n  reducers: {\n    addOrUpdateElement(\n      state,\n      action: PayloadAction<{\n        element: FormElementType;\n        parentId?: string;\n        index?: number;\n        prevId?: string;\n      }>\n    ) {\n      if (state.data[action.payload.element.id]) {\n        updateElement(state, action);\n      } else {\n        addElement(state, action);\n      }\n    },\n    removeFormElement(state, action: PayloadAction<{ id: string }>) {\n      handleDelete(state, action);\n    },\n    clearForm(state) {\n      return initialState;\n    },\n    submitForm(state) {\n      return initialState;\n    },\n  },\n});\n\nexport const selectFormData = (state: RootState) => state.formBuilder.data;\n\nexport const { removeFormElement, clearForm, submitForm, addOrUpdateElement } =\n  formBuilderSlice.actions;\n\nfunction adjacencify(\n  inputDataFromDb: Array<FormElementType>\n): FormAdjacencifiedData {\n  const returnObject: { [key: string]: any } = {};\n  returnObject.children = inputDataFromDb.map((item) => item.id);\n\n  const iterate = ({\n    data,\n    parentId,\n    idx,\n  }: {\n    data: any;\n    parentId?: number;\n    idx?: number;\n  }) => {\n    /*\n  \n      Loop of array overall\n      either columns subArrays, or\n      data overall\n  \n    */\n\n    for (const item of data) {\n      returnObject[item.id] = { type: item.type, body: item.body };\n\n      if (item.columns) {\n        let finalChildren = [];\n\n        /*\n  \n          Loop over columns items\n  \n        */\n        for (let i = 0; i < item.columns.length; i++) {\n          let nestedColumn = item.columns[i];\n\n          /*\n  \n            Traverses all children and returns\n            their ids\n  \n          */\n          finalChildren.push(\n            nestedColumn.map((nestedItem: { id: string }) => nestedItem.id)\n          );\n\n          /*\n  \n            Call the function on each columns\n            sub-array\n  \n          */\n\n          iterate({ data: nestedColumn, parentId: item.id, idx: i });\n        }\n\n        returnObject[item.id].children = finalChildren;\n      }\n\n      /*\n  \n        Associate nested item\n        with its parent, and its\n        array index on children\n  \n      */\n\n      if (parentId) {\n        returnObject[item.id].parent = {\n          id: parentId,\n        };\n        if (idx !== undefined) returnObject[item.id].parent.index = idx;\n      }\n    }\n  };\n\n  iterate({ data: inputDataFromDb });\n  return returnObject;\n}\n\nexport function unAdjacencify(data: FormAdjacencifiedData) {\n  const parse = (children: any) => {\n    const currArray = [];\n\n    for (const childId of children) {\n      const currNode = { type: data[childId].type, id: childId };\n      if (data[childId].body) (currNode as any).body = data[childId].body;\n      if (data[childId].color) (currNode as any).color = data[childId].color;\n      if (data[childId]?.children) {\n        (currNode as any).columns = (data[childId] as any).children.map(\n          (item: any) => parse(item)\n        );\n      }\n      currArray.push(currNode);\n    }\n    return currArray;\n  };\n\n  return parse(data.children).flat();\n}\n\nfunction addElement(\n  state: any,\n  action: PayloadAction<{\n    element: FormElementType;\n    parentId?: string;\n    index?: number;\n    prevId?: string;\n  }>\n) {\n  /*\n    \n    Element: the actual element to add\n    ParentId: the div that the element belongs to\n    Index: The subArray within children to add the element to\n    PrevId: The id on the element directly above the new element\n\n  */\n  const { element, parentId, index, prevId } = action.payload;\n  /*\n  \n    Nested updates\n\n  */\n\n  if (parentId) {\n    let currentList: Array<string> = [];\n    if (state.data[parentId].children) {\n      if (index !== undefined) {\n        currentList = [\n          ...(state.data[parentId].children as Array<Array<string>>)[index],\n        ];\n      }\n    }\n    if (index !== undefined) {\n      if (prevId) {\n        const currentIndex = currentList.indexOf(prevId);\n\n        /*\n                  \n          If the element is the descendent of the last child,\n          append the element to the end of the child list\n\n        */\n        if (currentIndex === currentList.length) {\n          (state.data[parentId].children as Array<Array<string>>)[index].push(\n            element.id\n          );\n        } else {\n          /*\n      \n            If the element is in the middle of the array\n            Add the element directly behind where its\n            previous ancestor lies\n\n          */\n\n          currentList.splice(currentIndex + 1, 0, element.id);\n        }\n      } else {\n        /*\n      \n          If there is no prevId, append item to the front of the list\n\n        */\n\n        currentList.unshift(element.id);\n      }\n\n      /*\n      \n        Update the parent state array to contain the correct references\n\n      */\n\n      if (state.data[parentId].children as Array<Array<string>>) {\n        (state.data[parentId].children as Array<Array<string>>)[index] =\n          currentList;\n      } else {\n        let newChildMatrix = new Array(3).fill([]);\n\n        newChildMatrix[index] = [element.id];\n        (state.data[parentId].children as Array<Array<string> | null>) =\n          newChildMatrix;\n      }\n    }\n  } else {\n    /*\n  \n      If there is no parent, then this is a top\n      level addition, no 'children' matrices \n      need to be updated. Just the top level\n        \n    */\n\n    if (state.data.children) {\n      if (prevId) {\n        let oldList = [...(state.data.children as any)];\n        oldList.splice(oldList.indexOf(prevId) + 1, 0, element.id);\n        (state.data.children as any) = oldList;\n      } else {\n        /*\n  \n          This is at most copying one array of string.\n          This is not a deep copy, and is functional\n\n        */\n\n        (state.data as any).children = [\n          element.id,\n          ...(state.data as any).children,\n        ];\n      }\n    } else {\n      (state.data as any).children = [element.id];\n    }\n  }\n\n  let elementToAdd: any = { type: element.type, body: element.body };\n\n  /*\n\n    Add mapping to parent from child\n\n  */\n\n  if (parentId) {\n    elementToAdd.parent = {\n      id: parentId,\n    };\n  }\n\n  if (index !== undefined) {\n    elementToAdd.parent.index = index;\n  }\n  state.data[element.id] = elementToAdd;\n}\n\nfunction updateElement(\n  state: any,\n  action: PayloadAction<{\n    element: FormElementType;\n    parentId?: string;\n    index?: number;\n    prevId?: string;\n  }>\n) {\n  const currentElement = state.data[action.payload.element.id];\n  let partiallyDeconstructed = {\n    ...state.data[action.payload.element.id],\n  };\n  if (partiallyDeconstructed.parent) {\n    partiallyDeconstructed.parent = { ...partiallyDeconstructed.parent };\n  }\n\n  /*\n\n    Handle updating the parent's children matrix\n\n  */\n\n  if (currentElement.parent) {\n    /*\n\n      Find the parent that owns this child\n\n    */\n    const theTargetedParentArray =\n      state.data[state.data[action.payload.element.id].parent.id].children[\n        currentElement.parent.index\n      ];\n\n    /*\n\n      Update the parent to no longer include the child id\n\n    */\n\n    state.data[state.data[action.payload.element.id].parent.id].children[\n      currentElement.parent.index\n    ] = theTargetedParentArray.filter(\n      (id: string): boolean => id !== action.payload.element.id\n    );\n  } else {\n    const currentTopLevelChildren = [...state.data.children];\n    const newTopLevelChildren = currentTopLevelChildren.filter(\n      (id: string): boolean => id !== action.payload.element.id\n    );\n    state.data.children = newTopLevelChildren;\n  }\n\n  /*\n\n    Add the id to the new parent's children matrix\n\n  */\n  addElement(state, action);\n}\n\nfunction handleDelete(state: any, action: PayloadAction<{ id: string }>) {\n  if (state.data[action.payload.id]) {\n    let child = {\n      ...state.data[action.payload.id],\n    };\n\n    if ((child as any).parent) {\n      (child as any).parent = {\n        ...(state.data[action.payload.id] as any).parent,\n      };\n    }\n\n    if ((state.data[action.payload.id] as any).parent) {\n      const { id: parent, index } = (state.data[action.payload.id] as any)\n        .parent;\n\n      const parentsChildArray = [\n        ...(state.data[parent].children as any)[index],\n      ];\n\n      const updatedArray = parentsChildArray.filter(\n        (elementId) => elementId !== action.payload.id\n      );\n      (state.data[parent].children as any)[index] = updatedArray;\n    } else {\n      // this is in the overall data structures children\n      const overAllChildren = [...(state.data.children as any)];\n      const updatedArray = overAllChildren.filter(\n        (elementId) => elementId !== action.payload.id\n      );\n      (state.data.children as any) = updatedArray;\n    }\n\n    /*\n\n      This is a 'cascading delete', so all children\n      and their associated nodes have to be deleted\n\n    */\n\n    if (state.data[action.payload.id].children) {\n      for (const list of state.data[action.payload.id].children) {\n        for (const childId of list) {\n          handleDelete(state, { payload: { id: childId } } as any);\n        }\n      }\n    }\n\n    delete state.data[action.payload.id];\n  }\n}\n","import { useMemo } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../store\";\nimport {\n  selectFormData,\n  addOrUpdateElement,\n  removeFormElement,\n  clearForm,\n  submitForm,\n} from \"./formBuilder.slice\";\nimport { FormElementType } from \"../../../types\";\n\nexport const useFormBuilder = () => {\n  const formData = useAppSelector(selectFormData);\n\n  const dispatch = useAppDispatch();\n\n  /*\n\n      Two types of updates:\n        Moving:\n          If the element exists:\n            1. Find it parent, remove its reference from children\n            2. Find the new parent, add the reference to new parent\n        Updating Content:\n          If the element exists:\n            1. Update the element\n\n      This also determines if this is an \n      add operation or an update operation\n\n  */\n\n  const dispatchUpdateOrAddElement = ({\n    formElement,\n    parentId,\n    index,\n    prevId,\n  }: {\n    formElement: FormElementType;\n    parentId?: string;\n    index?: number;\n    prevId?: string;\n  }) => {\n    dispatch(\n      addOrUpdateElement({ element: formElement, parentId, index, prevId })\n    );\n  };\n  /*\n\n    Remove a current element:\n      Also parse parents children\n\n  */\n\n  const dispatchRemoveFormElement = ({\n    formElementId,\n  }: {\n    formElementId: string;\n  }) => dispatch(removeFormElement({ id: formElementId }));\n\n  const dispatchClearForm = () => dispatch(clearForm());\n  const dispatchSubmitForm = () => dispatch(submitForm());\n\n  return useMemo(\n    () => ({\n      formData,\n      dispatchUpdateOrAddElement,\n      dispatchRemoveFormElement,\n      dispatchClearForm,\n      dispatchSubmitForm,\n    }),\n    [formData]\n  );\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { useDispatch, TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport { formBuilderSlice } from \"./slices/formBuilder\";\n\nexport const store = configureStore({\n  reducer: {\n    formBuilder: formBuilderSlice.reducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState } from \"react\";\nimport { useFormBuilder } from \"../../../redux/slices/formBuilder/useFormBuilder\";\nimport { unAdjacencify } from \"../../../redux/slices/formBuilder\";\n\nconst ViewState: React.FC = () => {\n  const { formData } = useFormBuilder();\n  const [isAdjacencyList, setIsAdjacencyList] = useState(true);\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        width: \"100vw\",\n        height: \"80vh\",\n        left: \"0px\",\n        top: \"0px\",\n        background: \"black\",\n        color: \"white\",\n        overflow: \"hidden\",\n        zIndex: \"100\",\n      }}\n    >\n      <button\n        onClick={(e) => {\n          setIsAdjacencyList((prev) => !prev);\n        }}\n      >\n        Toggle Transform\n      </button>\n      {isAdjacencyList && (\n        <pre\n          style={{\n            overflow: \"scroll\",\n            height: \"90%\",\n            width: \"100%\",\n            margin: \"15px\",\n          }}\n        >\n          {JSON.stringify(formData, null, 2)}\n        </pre>\n      )}\n      {!isAdjacencyList && (\n        <pre\n          style={{\n            overflow: \"scroll\",\n            height: \"90%\",\n            width: \"100%\",\n            margin: \"15px\",\n          }}\n        >\n          {JSON.stringify(unAdjacencify(formData), null, 2)}\n        </pre>\n      )}\n    </div>\n  );\n};\n\nexport default ViewState;\n","import * as React from \"react\";\nimport { useDrag } from \"react-dnd\";\n\ntype Props = {\n  id: string;\n  body: string;\n  listId: string;\n  handleRemoveElement: (id: string) => void;\n};\n\nexport const FormCheckboxElement: React.FC<Props> = ({\n  id,\n  body,\n  listId,\n  handleRemoveElement,\n}) => {\n  const onMoveElement = () => {\n    handleRemoveElement(id);\n  };\n  const [{ isDragging }, drag] = useDrag(() => ({\n    type: \"checkboxElement\",\n    item: { type: \"checkbox\", id, body, listId, onMoveElement },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  }));\n  const opacity = isDragging ? 0.3 : 1;\n  return (\n    <div\n      ref={drag}\n      style={{\n        margin: \"10px\",\n        backgroundColor: \"#f5cac3\",\n        border: \"1px grey solid\",\n        padding: \"10px\",\n        display: \"flex\",\n        alignItems: \"flex-end\",\n        gap: \"10px\",\n        borderRadius: \"5px\",\n        boxShadow: \"3px 5px 10px rgba(0, 0, 0, 0.2)\",\n        position: \"relative\",\n        transform: \"translate(0, 0)\",\n        opacity,\n      }}\n    >\n      <button\n        style={{\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\",\n          border: \"1px grey solid\",\n          borderRadius: \"5px\",\n        }}\n        onClick={onMoveElement}\n      >\n        x\n      </button>\n      <div\n        dangerouslySetInnerHTML={{\n          __html: body + \" <small>id:\" + id + \"</small>\",\n        }}\n      ></div>\n      <input type=\"checkbox\"></input>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { FormElementContainerType, FormElementType } from \"../../../../types\";\nimport { FormElementsList } from \"../../elements\";\n\ntype FormContainerElementProps = {\n  id: string;\n  body: string;\n  columns?: any;\n  listId: string;\n  handleRemoveElement: (id: string) => void;\n};\n\nexport const FormContainerElement: React.FC<FormContainerElementProps> = ({\n  id,\n  body,\n  columns: propColumns,\n  listId,\n  handleRemoveElement,\n}) => {\n  // using 3 columns as default - could be changed later\n  const [columnsNumber, setColumnsNumber] = useState(3);\n  const [columns, setColumns] =\n    useState<(FormElementType | FormElementContainerType)[][]>(propColumns);\n\n  const onMoveElement = () => {\n    handleRemoveElement(id);\n  };\n\n  const [{ isDragging }, drag] = useDrag(() => {\n    return {\n      type: \"containerElement\",\n      item: { type: \"container\", id, body, listId, columns, onMoveElement },\n      collect: (monitor) => ({\n        isDragging: monitor.isDragging(),\n      }),\n    };\n  });\n  const opacity = isDragging ? 0.3 : 1;\n\n  return (\n    <div\n      ref={drag}\n      style={{\n        backgroundColor: \"#f7ede2\",\n        border: \"1px grey solid\",\n        margin: \"10px\",\n        padding: \"10px\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        borderRadius: \"5px\",\n        boxShadow: \"3px 5px 10px rgba(0, 0, 0, 0.2)\",\n        position: \"relative\",\n        display: \"inlineBlock\",\n        transform: \"translate(0, 0)\",\n        opacity,\n      }}\n    >\n      <button\n        style={{\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\",\n          border: \"1px grey solid\",\n          borderRadius: \"5px\",\n        }}\n        onClick={onMoveElement}\n      >\n        x\n      </button>\n      <div\n        dangerouslySetInnerHTML={{\n          __html: body + \" <small>id:\" + id + \"</small>\",\n        }}\n      ></div>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        {columns.map((columnElement, i) => {\n          return (\n            <FormElementsList\n              key={i}\n              id={id + i}\n              rows={columnElement}\n              parentId={id}\n              containerIndex={i}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { useDrag } from \"react-dnd\";\n\ntype Props = {\n  id: string;\n  body: string;\n  listId: string;\n  handleRemoveElement: (id: string) => void;\n};\n\nexport const FormShortAnswerElement: React.FC<Props> = ({\n  id,\n  body,\n  listId,\n  handleRemoveElement,\n}) => {\n  const onMoveElement = () => {\n    handleRemoveElement(id);\n  };\n  const [{ isDragging }, drag] = useDrag(() => ({\n    type: \"shortAnswerElement\",\n    item: { type: \"shortAnswer\", id, body, listId, onMoveElement },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  }));\n  const opacity = isDragging ? 0.3 : 1;\n  return (\n    <div\n      ref={drag}\n      style={{\n        backgroundColor: \"#84a59d\",\n        border: \"1px grey solid\",\n        margin: \"10px\",\n        padding: \"10px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: \"10px\",\n        borderRadius: \"5px\",\n        boxShadow: \"3px 5px 10px rgba(0, 0, 0, 0.2)\",\n        position: \"relative\",\n        transform: \"translate(0, 0)\",\n        opacity,\n      }}\n    >\n      <button\n        style={{\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\",\n          border: \"1px grey solid\",\n          borderRadius: \"5px\",\n        }}\n        onClick={onMoveElement}\n      >\n        x\n      </button>\n      <div\n        dangerouslySetInnerHTML={{\n          __html: body + \" <small>id:\" + id + \"</small>\",\n        }}\n      ></div>\n      <input name={id} id={id}></input>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { FormElementType, FormElementContainerType } from \"../../../../types\";\nimport {\n  FormCheckboxElement,\n  FormShortAnswerElement,\n  FormContainerElement,\n} from \"./\";\n\ntype Props = {\n  elementData: {\n    id: string;\n    type: \"container\" | \"shortAnswer\" | \"checkbox\";\n    body: string;\n    columns?: (FormElementType | FormElementContainerType)[][];\n  };\n  index?: number; // only passed in if the element belongs in a container\n  listId: string;\n  handleRemoveElement: (id: string) => void;\n};\nexport const FormElement: React.FC<Props> = ({\n  elementData,\n  listId,\n  handleRemoveElement,\n}) => {\n  const { type, id, body, columns } = elementData;\n  if (type === \"checkbox\") {\n    return (\n      <FormCheckboxElement\n        id={id}\n        body={body}\n        listId={listId}\n        handleRemoveElement={handleRemoveElement}\n      />\n    );\n  } else if (type === \"shortAnswer\") {\n    return (\n      <FormShortAnswerElement\n        id={id}\n        body={body}\n        listId={listId}\n        handleRemoveElement={handleRemoveElement}\n      />\n    );\n  } else if (type === \"container\") {\n    return (\n      <FormContainerElement\n        id={id}\n        body={body}\n        columns={columns}\n        listId={listId}\n        handleRemoveElement={handleRemoveElement}\n      />\n    );\n  }\n  return <></>;\n};\n","export const ItemTypes = {\n  CONTAINER_ICON: \"containerIcon\",\n  CHECKBOX_ICON: \"checkboxIcon\",\n  SHORT_ANSWER_ICON: \"shortAnswerIcon\",\n  CONTAINER_ELEMENT: \"containerElement\",\n  CHECKBOX_ELEMENT: \"checkboxElement\",\n  SHORT_ANSWER_ELEMENT: \"shortAnswerElement\",\n};\n\nexport const DroppableItemTypesArr = [\n  \"containerIcon\",\n  \"checkboxIcon\",\n  \"shortAnswerIcon\",\n  \"containerElement\",\n  \"checkboxElement\",\n  \"shortAnswerElement\",\n];\n","import * as React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { DroppableItemTypesArr } from \"../ItemTypes\";\nimport { useFormBuilder } from \"../../../../redux/slices/formBuilder\";\nimport { FormElementType } from \"../../../../types\";\n\ntype itemType = {\n  id: string;\n  type: \"container\" | \"checkbox\" | \"shortAnswer\";\n  body: string;\n  listId: string;\n  columns: any[];\n  onMoveElement: () => void;\n};\n\ntype DropAreaProps = {\n  parent?: string;\n  prevId?: string; // this is the id of an element that contains the drop area\n  index?: number;\n  listId: string;\n  handleAddElement: ({\n    newElement,\n    prevId,\n    index,\n    parent,\n  }: {\n    newElement: FormElementType;\n    prevId?: string;\n    index?: number;\n    parent?: string;\n  }) => void;\n  handleMoveElement: (\n    elementIdToMove: string,\n    prevId: string | undefined\n  ) => void;\n};\n\nexport const DropArea: React.FC<DropAreaProps> = ({\n  prevId,\n  index,\n  parent,\n  listId,\n  handleAddElement,\n  handleMoveElement,\n}) => {\n  const { dispatchUpdateOrAddElement } = useFormBuilder();\n\n  const [{ canDrop, isOver }, drop] = useDrop(\n    () => ({\n      accept: DroppableItemTypesArr,\n      canDrop: () => {\n        return true;\n      },\n      drop: (item: itemType, monitor) => {\n        const newElement = {\n          id: item.id\n            ? item.id\n            : Date.now().toString() +\n              Math.floor(Math.random() * 25 + 10).toString(36),\n          type: item.type,\n          body: item.body ? item.body : \"<div>New element!</div>\",\n          ...(item.type === \"container\" && {\n            columns: item.columns ? item.columns : [[], [], []],\n          }), // TODO: handle this better for containers\n        };\n        if (listId === item.listId) {\n          handleMoveElement(item.id, prevId);\n        } else {\n          item.onMoveElement && item.onMoveElement();\n          handleAddElement &&\n            handleAddElement({ newElement, prevId, index, parent });\n        }\n        /*\n\n          prevId: Id of the element directly above \n          the element being inserted. \n\n          index: location within the array\n\n        */\n\n        dispatchUpdateOrAddElement({\n          formElement: newElement,\n          parentId: parent,\n          index,\n          prevId,\n        });\n      },\n      collect: (monitor) => ({\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop(),\n      }),\n    }),\n    []\n  );\n\n  const isActive = canDrop && isOver;\n\n  return (\n    <div\n      ref={drop}\n      style={{\n        backgroundColor: isActive ? \"#56d18b\" : \"\",\n        width: \"100%\",\n        height: isActive ? \"20px\" : \"5px\",\n      }}\n    ></div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { FormElement } from \".\";\nimport { useFormBuilder } from \"../../../redux/slices/formBuilder/useFormBuilder\";\nimport { FormElementType, FormElementContainerType } from \"../../../types\";\nimport { DropArea } from \"./Components/DropArea\";\n\ntype Props = {\n  id: string;\n  rows: (FormElementType | FormElementContainerType)[];\n  parentId: string | undefined; // List belongs to the parent, but doesn't belong in overall data structure\n  containerIndex?: number; // this is only used if the FormElementsList belongs in a container\n};\nexport const FormElementsList: React.FC<Props> = ({\n  id,\n  containerIndex,\n  rows,\n  parentId,\n}) => {\n  const { dispatchRemoveFormElement } = useFormBuilder();\n  const [elementList, setElementList] =\n    useState<(FormElementType | FormElementContainerType)[]>(rows);\n\n  const handleAddElement = ({\n    newElement,\n    prevId,\n    parent,\n  }: {\n    newElement: FormElementType;\n    prevId?: string; // this is the id of element that's directly above the drop zone. if the drop zone is the top drop zone, this is null\n    parent?: string;\n  }) => {\n    if (!prevId) {\n      // the drop zone is the top drop zone\n      setElementList((prevElementList) => [newElement, ...prevElementList]);\n    } else {\n      setElementList((prevElementList) => {\n        let prevElementIndex = prevElementList.findIndex(\n          (element) => element.id === prevId\n        );\n        return [\n          ...prevElementList.slice(0, prevElementIndex + 1),\n          newElement,\n          ...prevElementList.slice(prevElementIndex + 1),\n        ];\n      });\n    }\n  };\n\n  // This function removes an element from a list if the element is \"moved\" to another list or container.\n  const handleRemoveElement = (elementIdToRemove: string) => {\n    /*\n\n      IF THERE IS AN ID, THIS IS A DELETION\n\n    */\n    dispatchRemoveFormElement({ formElementId: elementIdToRemove });\n    setElementList((prevElementList) =>\n      prevElementList.filter((element) => element.id !== elementIdToRemove)\n    );\n  };\n\n  const handleMoveElement = (\n    elementIdToMove: string,\n    prevId: string | undefined\n  ) => {\n    if (elementIdToMove === prevId) return;\n\n    setElementList((prevElementList) => {\n      const from = prevElementList.findIndex(\n        (element) => element.id === elementIdToMove\n      );\n      const to =\n        prevId === undefined\n          ? 0\n          : prevElementList.findIndex((element) => element.id === prevId) + 1;\n      if (from === to) return prevElementList;\n      if (!prevId) {\n        return [\n          prevElementList[from],\n          ...prevElementList.slice(0, from),\n          ...prevElementList.slice(from + 1),\n        ];\n      } else if (to < from) {\n        //going up\n        return [\n          ...prevElementList.slice(0, to),\n          prevElementList[from],\n          ...prevElementList.slice(to, from),\n          ...prevElementList.slice(from + 1),\n        ];\n      } else {\n        //going down\n        return [\n          ...prevElementList.slice(0, from),\n          ...prevElementList.slice(from + 1, to),\n          prevElementList[from],\n          ...prevElementList.slice(to),\n        ];\n      }\n    });\n  };\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      <DropArea\n        index={containerIndex}\n        parent={parentId}\n        listId={id}\n        handleAddElement={handleAddElement}\n        handleMoveElement={handleMoveElement}\n      />\n      {elementList.length ? (\n        elementList.map((elementData, i) => {\n          let elementId =\n            elementData.id ||\n            Date.now().toString() +\n              Math.floor(Math.random() * 25 + 10).toString(36);\n          return (\n            <div key={elementId}>\n              <FormElement\n                elementData={{ ...elementData, id: elementId }}\n                listId={id}\n                handleRemoveElement={handleRemoveElement}\n              />\n              <DropArea\n                prevId={elementId}\n                index={containerIndex}\n                parent={parentId}\n                listId={id}\n                handleAddElement={handleAddElement}\n                handleMoveElement={handleMoveElement}\n              />\n            </div>\n          );\n        })\n      ) : (\n        <div\n          style={{\n            backgroundColor: \"#f7ede2\",\n            border: \"1px white solid\",\n            margin: \"10px\",\n            padding: \"10px\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            borderRadius: \"5px\",\n            textAlign: \"center\",\n          }}\n        >\n          Add your element here\n          <DropArea\n            handleAddElement={handleAddElement}\n            handleMoveElement={handleMoveElement}\n            index={containerIndex}\n            parent={parentId}\n            listId={id}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { AddButton } from \"../Components/AddButton\";\ntype Props = {\n  type: \"container\" | \"shortAnswer\" | \"checkbox\";\n  color?: string;\n};\nexport const FormIcon: React.FC<Props> = ({ type, color }) => {\n  const [, drag] = useDrag(() => ({\n    type: type + \"Icon\",\n    item: { type },\n  }));\n  return (\n    <div\n      ref={drag}\n      style={{\n        margin: \"10px\",\n        border: \"1px grey solid\",\n        borderRadius: \"5px\",\n        boxShadow: \"3px 5px 10px rgba(0, 0, 0, 0.2)\",\n        padding: \"10px\",\n        textAlign: \"center\",\n        justifyContent: \"space-between\",\n        backgroundColor: color,\n        transform: \"translate(0, 0)\",\n      }}\n    >\n      {type}\n      {/* <AddButton type={type} /> */}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { FormElementContainerType, FormElementType } from \"../../../../types\";\nimport { FormElementsList } from \"../../elements\";\n\nconst data = require(\"../../../../InitialData.json\");\n\ntype Props = {\n  id?: string;\n};\n\nexport const FormBuilderCanvas: React.FC<Props> = ({ id }) => {\n  const [formElements, setFormElements] =\n    useState<(FormElementType | FormElementContainerType)[]>(data);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"90%\",\n        overflow: \"auto\",\n        backgroundColor: \"#f0f4f5\",\n        padding: \"10px\",\n        margin: \"10px\",\n      }}\n    >\n      FormBuilderCanvas\n      <FormElementsList\n        id={\n          Date.now().toString() +\n          Math.floor(Math.random() * 25 + 10).toString(36)\n        }\n        rows={formElements}\n        parentId={id}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { FormIcon } from \"../../elements/FormIcons\";\n\nconst elementArr = [\"checkbox\", \"shortAnswer\", \"container\"] as const;\nconst elementColor = {\n  checkbox: \"#f5cac3\",\n  shortAnswer: \"#84a59d\",\n  container: \"#f7ede2\",\n};\n\ntype Props = {\n  isDesktop: boolean;\n};\nexport const FormBuilderSidebar: React.FC<Props> = ({ isDesktop }) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: isDesktop ? \"10%\" : \"90%\",\n        minWidth: \"180px\",\n        backgroundColor: \"#e9f0ec\",\n        padding: \"10px\",\n        margin: \"10px\",\n      }}\n    >\n      <div>FormBuilderSidebar</div>\n      {elementArr.map((type) => (\n        <FormIcon key={type} type={type} color={elementColor[type]} />\n      ))}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport ViewState from \"../../state/ViewState\";\n\nimport { FormBuilderCanvas } from \"../FormBuilderCanvas\";\nimport { FormBuilderSidebar } from \"../FormBuilderSidebar\";\n\nexport const FormBuilderPage = () => {\n  const [isViewingState, setIsViewingState] = React.useState(false);\n  const [isDesktop, setIsDesktop] = useState(\n    window.matchMedia(\"(min-width: 768px)\").matches\n  );\n\n  useEffect(() => {\n    window\n      .matchMedia(\"(min-width: 768px)\")\n      .addEventListener(\"change\", (e) => setIsDesktop(e.matches));\n  }, []);\n\n  function handleToggleStateView(e: any) {\n    e.preventDefault();\n    setIsViewingState((prev) => !prev);\n  }\n\n  return (\n    <>\n      {isViewingState && <ViewState />}\n      <div\n        style={{\n          display: isDesktop ? \"flex\" : \"inline\",\n          height: \"calc(100vh - 80px)\",\n        }}\n      >\n        <FormBuilderSidebar isDesktop={isDesktop} />\n        <FormBuilderCanvas />\n      </div>\n\n      <button\n        style={{\n          margin: \"10px\",\n          border: \"none\",\n          padding: \"10px\",\n          float: \"right\",\n          borderRadius: \"10px\",\n          fontSize: isDesktop ? \"15px\" : \"12px\",\n          zIndex: \"1000\",\n        }}\n        onClick={handleToggleStateView}\n      >\n        View State\n      </button>\n    </>\n  );\n};\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport \"./index.css\";\n\nimport { FormBuilderPage } from \"./views/forms/builder/FormBuilderPage\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <DndProvider\n        backend={\n          window.matchMedia(\"(pointer: coarse)\").matches\n            ? TouchBackend\n            : HTML5Backend\n        }\n      >\n        <FormBuilderPage />\n      </DndProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}